on:
  push:
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"
  workflow_dispatch:

name: main

env:
  AS: nasm
  RUST_TOOLCHAIN: 1.83.0
  TOOLCHAIN_PROFILE: minimal

permissions:
  contents: read

jobs:
  setup:
    runs-on: ubuntu-22.04
    steps:
      # Install first since it's needed to build NASM
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@98e68e10c96dffcb7bfed8b2144541a66b49aa02 # v2.0.8
        with:
          version: "10.0"
          directory: ${{ runner.temp }}/llvm
      
      - name: Install libtinfo5
        run: sudo apt-get update -y && sudo apt-get install libtinfo5 -y

      - name: Install NASM
        uses: ilammy/setup-nasm@72793074d3c8cdda771dba85f6deafe00623038b # v1.5.2

      - name: Install tools for sgx lib
        run:  sudo apt-get install build-essential ocaml ocamlbuild automake autoconf libtool wget python-is-python3 libssl-dev git cmake perl

      - name: Checkout sources
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: recursive

      - name: Install toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: ${{ env.TOOLCHAIN_PROFILE }}
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
          components: rust-src

      - name: Add `x86_64-unknown-none` target
        run: rustup target add x86_64-unknown-none
        
      - name: Preparation Work
        run: bash sh_script/preparation.sh

  build-release:
    name: Build (${{ matrix.name }} / ${{ matrix.protocol }})
    needs: setup
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - name: virtio-vsock
            build_args: ""
          - name: virtio-serial
            build_args: "--no-default-features --features main,stack-guard,virtio-serial"
          - name: vmcall-vsock
            build_args: "--no-default-features --features main,stack-guard,vmcall-vsock"
          - name: vmcall-raw
            build_args: "--no-default-features --features stack-guard,vmcall-raw"
          - name: test_disable_ra_and_accept_all
            build_args: "--features test_disable_ra_and_accept_all"
          - name: policy-v2
            build_args: "--policy-v2 --policy config/templates/policy_v2_signed.json --policy-issuer-chain config/templates/policy_issuer_chain.pem"
        protocol: [tls, spdm]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5.0.0
        with:
          submodules: recursive

      - name: Restore setup artifacts
        run: echo "Setup steps are assumed to be cached or already run in a monorepo context."

      - name: Build MigTD binary (${{ matrix.name }} / ${{ matrix.protocol }})
        run: |
          EXTRA_FEATURES=""
          if [ "${{ matrix.protocol }}" = "spdm" ]; then
            EXTRA_FEATURES="--features spdm_attestation"
          fi
          cargo image ${{ matrix.build_args }} $EXTRA_FEATURES

  build-debug:
    name: Build Debug (${{ matrix.name }} / ${{ matrix.protocol }})
    needs: setup
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - name: virtio-vsock
            build_args: "--debug"
          - name: virtio-serial
            build_args: "--debug --no-default-features --features main,stack-guard,virtio-serial"
          - name: vmcall-vsock
            build_args: "--debug --no-default-features --features main,stack-guard,vmcall-vsock"
          - name: vmcall-raw
            build_args: "--debug --no-default-features --features stack-guard,vmcall-raw"
          - name: test_disable_ra_and_accept_all
            build_args: "--debug --features test_disable_ra_and_accept_all"
          - name: policy-v2
            build_args: "--debug --policy-v2 --policy config/templates/policy_v2_signed.json --policy-issuer-chain config/templates/policy_issuer_chain.pem"
        protocol: [tls, spdm]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5.0.0
        with:
          submodules: recursive

      - name: Restore setup artifacts
        run: echo "Setup steps are assumed to be cached or already run in a monorepo context."

      - name: Build MigTD binary (${{ matrix.name }} / ${{ matrix.protocol }}, debug)
        run: |
          EXTRA_FEATURES=""
          if [ "${{ matrix.protocol }}" = "spdm" ]; then
            EXTRA_FEATURES="--features spdm_attestation"
          fi
          cargo image ${{ matrix.build_args }} $EXTRA_FEATURES